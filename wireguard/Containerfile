# === Stage 1: Build Boringtun CLI ===
FROM rust:alpine AS builder

# Install build tools and musl support
RUN apk add --no-cache \
      build-base \
      musl-dev \
      linux-headers \
      bash \
      curl \
      git

# Install MUSL target for Rust
RUN rustup target add x86_64-unknown-linux-musl

# Now compile boringtun statically
RUN cargo install --locked boringtun-cli --target x86_64-unknown-linux-musl

# Stage 2 â€“ Final image
FROM alpine:latest
LABEL maintainer="jackturk5@outlook.com"

# Set default environment variables for WGDashboard
ENV WGDASH=/opt/wgdashboard \
    WG_PORT=51820 \
    WG_NET=10.8.0.1 \
    WGDASH_PORT=10086 \
    TZ=UTC \
    WG_QUICK_USERSPACE_IMPLEMENTATION=boringtun-cli

# Install system packages (WireGuard tools, BoringTun, Python, etc.)
RUN apk update && apk add --no-cache \
      bash git curl tzdata sudo \
      iptables ip6tables wireguard-tools \ 
      python3 py3-pip py3-psutil py3-bcrypt && \
    apk upgrade

# Copy BoringTun binary from build stage
COPY --from=builder /root/.cargo/bin/boringtun-cli /usr/bin/boringtun-cli

# Create application directories and copy source
RUN mkdir -p /etc/wireguard /data && mkdir -p ${WGDASH}/src
COPY ./src ${WGDASH}/src

# Build Python virtual environment and install requirements at build-time
RUN python3 -m venv ${WGDASH}/src/venv && \
    . ${WGDASH}/src/venv/bin/activate && \
    # Install all Python dependencies (except those provided by Alpine)
    pip install --no-cache-dir -r ${WGDASH}/src/requirements.txt && \
    deactivate

# Generate a default WireGuard config template (wg0.conf)
# This will be used on first run if no /etc/wireguard/wg0.conf exists.
RUN OUT_IFACE=$(ip -o -4 route show to default | awk '{print $NF}') && \
    echo -e "[Interface]\nAddress = ${WG_NET}/24\nPrivateKey = \n\
PostUp = iptables -t nat -I POSTROUTING 1 -s ${WG_NET}/24 -o ${OUT_IFACE} -j MASQUERADE\n\
PostUp = iptables -I FORWARD -i wg0 -o wg0 -j DROP\n\
PreDown = iptables -t nat -D POSTROUTING -s ${WG_NET}/24 -o ${OUT_IFACE} -j MASQUERADE\n\
PreDown = iptables -D FORWARD -i wg0 -o wg0 -j DROP\n\
ListenPort = ${WG_PORT}\nSaveConfig = true\nDNS = 1.1.1.1\n" \
    > /opt/wgdashboard/src/wg0.conf.template && \
    chmod 600 /opt/wgdashboard/src/wg0.conf.template

# Healthcheck to ensure the dashboard process stays running
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD pgrep gunicorn > /dev/null && pgrep tail > /dev/null || exit 1

# Copy and set the entrypoint script
COPY ./docker/entrypoint.sh /entrypoint.sh
WORKDIR $WGDASH
ENTRYPOINT ["/bin/bash", "/entrypoint.sh"]

# Expose the web UI port
EXPOSE 10086/tcp