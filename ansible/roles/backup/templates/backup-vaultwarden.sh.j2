#!/bin/bash
set -e
set -u
set -o pipefail

# --- Configuration ---
# Source directory for the backup (Vaultwarden's data)
SOURCE_DIR="{{ ansible_user_dir }}/.config/vault/data"

# Local backup destination
BACKUP_DIR="{{ ansible_user_dir }}/vaultwarden_backups"

# rclone remote configuration
RCLONE_REMOTE="gdrive" # The name of your rclone remote for Google Drive
REMOTE_DIR="Backups/Vaultwarden" # The folder in Google Drive

# Retention period (in days) for local backups
LOCAL_RETENTION_DAYS=7

# --- Script ---
TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
LOG_FILE="{{ ansible_user_dir }}/vaultwarden_backup.log"
exec > >(tee -a "${LOG_FILE}") 2>&1

echo "--- Starting Vaultwarden Backup: ${TIMESTAMP} ---"

if [ ! -d "${SOURCE_DIR}" ]; then
    echo "Error: Source directory '${SOURCE_DIR}' not found." >&2
    exit 1
fi

# Create backup directory if it doesn't exist
mkdir -p "${BACKUP_DIR}"

BACKUP_FILENAME="vaultwarden-backup-${TIMESTAMP}.tar.gz"
BACKUP_FILEPATH="${BACKUP_DIR}/${BACKUP_FILENAME}"

# 1. Stop Vaultwarden container
echo "Stopping Vaultwarden container..."
systemctl --user stop vault

# 2. Create compressed archive
echo "Creating backup archive of ${SOURCE_DIR}..."
tar -czf "${BACKUP_FILEPATH}" -C "${SOURCE_DIR}" .
echo "Backup created at ${BACKUP_FILEPATH}"

# 3. Restart Vaultwarden container
echo "Starting Vaultwarden container..."
systemctl --user start vault

# 4. Upload to Google Drive
echo "Uploading backup to Google Drive (${RCLONE_REMOTE}:${REMOTE_DIR})..."
{{ ansible_user_dir }}/.local/bin/rclone copy "${BACKUP_FILEPATH}" "${RCLONE_REMOTE}:${REMOTE_DIR}" --progress
echo "Upload complete."

# 5. Clean up old local backups
echo "Cleaning up local backups older than ${LOCAL_RETENTION_DAYS} days..."
find "${BACKUP_DIR}" -type f -name "vaultwarden-backup-*.tar.gz" -mtime +${LOCAL_RETENTION_DAYS} -exec rm -v {} \;

echo "--- Backup Finished Successfully: ${TIMESTAMP} ---"
